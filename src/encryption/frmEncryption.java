/*
 * Michael Botros
 * January 28th, 2020
 * This program allows any user to encrypt a message using a key with an XOR encryption method. The software also has a decryption menu where the user can decrypt an encrypted message if they have the key
 */

package encryption;

/**
 *
 * @author MiBot3117
 */
public class frmEncryption extends javax.swing.JFrame {

    /**
     * Creates new form frmEncryption
     */
    public frmEncryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblTitle2 = new javax.swing.JLabel();
        lblInstructionEncrypt = new javax.swing.JLabel();
        btnEncrypt = new javax.swing.JButton();
        lblEncryptResult = new javax.swing.JLabel();
        btnToDecryption = new javax.swing.JButton();
        btnGenerateKey = new javax.swing.JButton();
        lblKeyInstructions = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        lblKeyEntry = new javax.swing.JLabel();
        scrMessage = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEncrypted = new javax.swing.JTextArea();
        lblTip = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("TI-92p Mini Sans", 0, 14)); // NOI18N
        lblTitle.setText("---TOP SECRET---");

        lblTitle2.setFont(new java.awt.Font("Ti83pc", 0, 14)); // NOI18N
        lblTitle2.setText("---ENCRYPTER/DECRYPTER SOFTWARE---");

        lblInstructionEncrypt.setFont(new java.awt.Font("Ti73pc", 0, 11)); // NOI18N
        lblInstructionEncrypt.setText("Enter a decrypted message to encrypt it");

        btnEncrypt.setFont(new java.awt.Font("Ti83pc", 0, 11)); // NOI18N
        btnEncrypt.setForeground(new java.awt.Color(204, 0, 0));
        btnEncrypt.setText("ENCRYPT");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        lblEncryptResult.setFont(new java.awt.Font("Ti83Pluspc", 0, 11)); // NOI18N

        btnToDecryption.setText("To Decryption--->");
        btnToDecryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToDecryptionActionPerformed(evt);
            }
        });

        btnGenerateKey.setText("Generate Key");
        btnGenerateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateKeyActionPerformed(evt);
            }
        });

        lblKeyInstructions.setText("Your key will appear here...");

        txtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyActionPerformed(evt);
            }
        });

        lblKeyEntry.setText("Enter your key here:");

        txtMessage.setColumns(20);
        txtMessage.setLineWrap(true);
        txtMessage.setRows(5);
        scrMessage.setViewportView(txtMessage);

        txtEncrypted.setColumns(20);
        txtEncrypted.setLineWrap(true);
        txtEncrypted.setRows(5);
        jScrollPane1.setViewportView(txtEncrypted);

        lblTip.setText("(A number is preferable)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(lblInstructionEncrypt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGenerateKey)
                            .addComponent(lblKeyEntry))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblKeyInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnToDecryption)
                                .addGap(40, 40, 40))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTitle2)
                                .addGap(103, 103, 103))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTip)
                                .addGap(18, 18, 18)
                                .addComponent(btnEncrypt)
                                .addGap(221, 221, 221))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblEncryptResult, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(scrMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstructionEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblEncryptResult, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateKey)
                    .addComponent(lblKeyInstructions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKeyEntry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEncrypt)
                    .addComponent(lblTip))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(btnToDecryption)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
       
    //Grab the users message as a string
    String message = txtMessage.getText();
    //String messageBinary = strToBinary(message);
       
    //String messageBinaryEncrypted = "";
    //declaring end message string
    String messageEncrypted = "";
       
    //Grab the key from the user as a string
    String key = txtKey.getText()+"1";
    //String keyBinary = strToBinary(message);
       
    //trying to catch an error where there is no key and a division occurs with the key length when the key lenght value is 0
    try {
    //convert the message using the key using the convert method
    messageEncrypted = convert(message, key);
    }
       
    catch (NumberFormatException e)
    {
    txtEncrypted.setText("Please enter a real input");
    }
       
    //display the encryted message to the output section
    txtEncrypted.setText(messageEncrypted);
               
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnToDecryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToDecryptionActionPerformed
        
        //if you click the "to decryption" button, switch the frame from the encryption to decryption
        this.setVisible(false);
        new frmDecryption().setVisible(true);
    }//GEN-LAST:event_btnToDecryptionActionPerformed

    private void txtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyActionPerformed

    private void btnGenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateKeyActionPerformed
       
       //set the max and min value that the random number generator can produce
       final int MAX = 899999999;
       final int MIN = 100000000;
       
       //call a method that randomly generates a number between the min and max number
       randomKeyGenerator(MIN, MAX);
    }//GEN-LAST:event_btnGenerateKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEncryption().setVisible(true);
            }
        });
    }
    
    /**
     * 
     * @param input - this parameter takes any string
     * @return - the reversed string
     */
    static String reverse(String input)  
    { 
        //create a string and a variable for the first and last character of the string
        char[] string = input.toCharArray(); 
        int first = 0;
        int last = 0; 
        last = string.length - 1; 
  
        //this for loop counts up from the start of the string and down from the end and replaces the ends until it reaches the middle where then the string is reversed
        for (first = 0; first < last; first++, last--) 
        { 
            // Swap values of first and last  
            char temp = string[first]; 
            string[first] = string[last]; 
            string[last] = temp; 
        } 
        //returning the value of the string
        return String.valueOf(string); 
    } 
    
    /**
     * 
     * @param message - the message that needs to be XOR encrypted in the form of a string
     * @param key - the that the message is encrypted with in the form of a string
     * @return - the XOR encrypted message in the form of a string
     */
    public String convert(String message, String key)
    {
        //build a new string for the end encrypted string
        StringBuilder sb = new StringBuilder();
        String result = "";
        
        //this for loop will xor the first characters of the string and key and add it to the result string and will repeat for every character of the message
        for(int i = 0; i < message.length(); i++)
        {
            sb.append((char)(message.charAt(i) ^ key.charAt(i % key.length())));
            result = sb.toString();
        }
        //the method then returns the encrypted string
        return(result);
    }
    
    /**
     * 
     * @param message - the message that needs to be encrypted in the form of a string
     * @param key - the key that will be used to encrypt the message in the form of a string
     * @return - the encrypted message as a string of 1's and 0's
     */
    public String xorEncrypt(String message, String key){
        
        //this for loop will xor the values of the characters of the key and message assuming that they are binary. It will then take the resulting value and add a 1 or 0 to the ecnrypted binary string
        String output = "";
        for (int i = 0; i<message.length(); i++){
            int binValue = message.charAt(i) ^ key.charAt(i);
        
            if(binValue == 1){
                output += "1";
            } else {
                output += "0";
            }
       }
        //return the encrypted binary string
        return(output);
    }
    
    /**
     * 
     * @param messageBinaryEncrypted - takes in a string of 1's and 0's
     * @return - a string of characters
     */
    public String binaryToString(String messageBinaryEncrypted){
        
        //this for loop splits a binary string into 8 bits and takes the value of the byte and then converts the ascii number into a char and adds it to a string
        String output = "";
        for(int index = 0; index < messageBinaryEncrypted.length(); index+=7) {
            
            String temp = messageBinaryEncrypted.substring(index, index+7);
            int num = Integer.parseInt(temp,2);
            char letter = (char) num;
            output += letter;
            
        }
    //returns the binary string in characters
    return(output);
    }
    
    /**
     * 
     * @param message - a string of characters
     * @return - a string of 1's and 0's
     */
    public String strToBinary(String message) 
    {
        //declaring all variables
        int length = message.length(); 
        String binary = "";
        
        for (int i = 0; i < length; i++)  
        { 
            // converting each char to an ASCII value 
            int value = Integer.valueOf(message.charAt(i)); 
  
            // Converting ASCII value to binary by modulus dividing by 2 and checking the remainder to determine the value of the bit, then dividing by two until you get to 0. The result is the reverse binary string of the value
            while (value > 0)  
            { 
                if (value % 2 == 1)
                { 
                    binary += '1'; 
                } 
                else
                    binary += '0'; 
                value = value/2;
            } 
            binary = reverse(binary); 
            
        } 
        return(binary);
    }
    
    /**
     * 
     * @param key - a key to lengthen in the form of a string of characters
     * @param message - a message to determine the length of the key in the form of a string of characters
     * @return - the lengthened key in the form of a string of characters
     */
    public String lengthenKey(String key, String message){
        
        //this loop lengthens the key by seeing how many times the key (+1 so that if there is no key there is no crash) goes into the message and adds it that many times plus 1 to be sure
        for(int i = 0; i>=((message.length()/key.length()+1)); i++)
        {
            String temporary = key;
            key = temporary + key;
        }
        //returns the lengthened key
        return(key);
    }
    
    /**
     * 
     * @param n1 - the minimum value that can be generated
     * @param n2 - the maximum value that can be generated
     */
    public void randomKeyGenerator(int n1, int n2) {
        
        //randomly generates a number between 100000000 and 999999999 and display it on the GUI
        int randomNumber = (int)Math.round(Math.random()*n2+n1);
        lblKeyInstructions.setText(String.valueOf(randomNumber));
        
        //this old version of the method would do the same thing but would generate the ascii values of the alphabet and randomly output those
        /*
        String randomKey = "";      
        
        for (int i = 0; i<n2; i++) {
        int randomNumber = (int)Math.round(Math.random()*n1+97);
        randomKey += Character.toString((char)randomNumber);
        lblKeyInstructions.setText(randomKey);
        }
        */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnGenerateKey;
    private javax.swing.JButton btnToDecryption;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEncryptResult;
    private javax.swing.JLabel lblInstructionEncrypt;
    private javax.swing.JLabel lblKeyEntry;
    private javax.swing.JLabel lblKeyInstructions;
    private javax.swing.JLabel lblTip;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JScrollPane scrMessage;
    private javax.swing.JTextArea txtEncrypted;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables
}
